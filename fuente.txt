	
	
	
	
	
    public static void main( String[] args )
    {
		try {
			String szFileOri = "prestamo.xlsx";
			String szFileMod = "prestamo2.xlsx";
			String szUltCol = "30";
			// fichero original, el que utilizan los usuarios
			// FileInputStream excelFile = new FileInputStream(new File(FILE_NAME));
            // Workbook workbook = new XSSFWorkbook(excelFile);
			FileInputStream fileori = new FileInputStream(new File(szFileOri));
			Workbook workbookori = new XSSFWorkbook(fileori);
			Sheet sheetori = workbookori.getSheetAt(0);
			Iterator<Row> rowIteratorori = sheetori.iterator();
			
			// fichero que hemos modificado
			FileInputStream filemod = new FileInputStream(szFileMod);
			XSSFWorkbook workbookmod = new XSSFWorkbook(filemod);
			XSSFSheet sheetmod = workbookmod.getSheetAt(0);
			
			int ResultCol = Integer.parseInt(szUltCol);
			
			int isDifferent = 0;
			int numRow = 0;
			
			CellStyle styleMod = workbookmod.createCellStyle();
			styleMod.setFillForegroundColor(IndexedColors.LIGHT_ORANGE.getIndex());
			styleMod.setFillPattern(FillPatternType.SOLID_FOREGROUND);
			
			Row rowori;
			Row rowmod;
			
			
			while (rowIteratorori.hasNext()){
			    rowori = rowIteratorori.next();
			    numRow = rowori.getRowNum();
			    rowmod = sheetmod.getRow(numRow);
			    Cell celdaori;
			    Cell celdamod;
			    isDifferent = 0;
			    for(int i=0; i<(ResultCol-2); i++){
		            int numCol = i;
		            celdaori = rowori.getCell(numCol);
		            celdamod = rowmod.getCell(numCol);
					switch(celdaori.getCellTypeEnum()) {
						case NUMERIC:
						    if( DateUtil.isCellDateFormatted(celdaori) ){
						    	if (celdaori.getDateCellValue() != celdamod.getDateCellValue()) {
						    		celdamod.setCellStyle(styleMod);
						    		isDifferent = isDifferent + 1;
						    	}	    	
						    }
						    else{
						    	if (celdaori.getNumericCellValue() != celdamod.getNumericCellValue()) {
						    		celdamod.setCellStyle(styleMod);
						    		isDifferent = isDifferent + 1;
						    	}
						    }
						    break;
						case STRING:
					    	if (celdaori.getStringCellValue() != celdamod.getStringCellValue()) {
					    		celdamod.setCellStyle(styleMod);
					    		isDifferent = isDifferent + 1;
					    	}
						    break;
						case BOOLEAN:
					    	if (celdaori.getBooleanCellValue() != celdamod.getBooleanCellValue()) {
					    		celdamod.setCellStyle(styleMod);
					    		isDifferent = isDifferent + 1;
					    	}
							break;
						default:
							break;							
					}
		        }

			}
			FileOutputStream filemodsave = new FileOutputStream(szFileMod);
			workbookmod.write(filemodsave);
			workbookori.close();
			workbookmod.close();
		}
		 catch (FileNotFoundException e) {
	            e.printStackTrace();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }		
		}
}
	
	public static void main(String[] args) throws IOException {
		try {
			Workbook wb = new XSSFWorkbook();
		    FileOutputStream fileOut;
			fileOut = new FileOutputStream("workbook.xlsx");
		    wb.write(fileOut);
		    wb.close();
		    fileOut.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			FileOutputStream fileOut = new FileOutputStream("poi-test.xls");
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet worksheet = workbook.createSheet("POI Worksheet");

			// index from 0,0... cell A1 is cell(0,0)
			HSSFRow row1 = worksheet.createRow((short) 0);

			HSSFCell cellA1 = row1.createCell((short) 0);
			cellA1.setCellValue("Hello");
			HSSFCellStyle cellStyle = workbook.createCellStyle();
			cellStyle.setFillForegroundColor(HSSFColor.GOLD.index);
			cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
			cellA1.setCellStyle(cellStyle);

			HSSFCell cellB1 = row1.createCell((short) 1);
			cellB1.setCellValue("Goodbye");
			cellStyle = workbook.createCellStyle();
			cellStyle.setFillForegroundColor(HSSFColor.LIGHT_CORNFLOWER_BLUE.index);
			cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
			cellB1.setCellStyle(cellStyle);

			HSSFCell cellC1 = row1.createCell((short) 2);
			cellC1.setCellValue(true);

			HSSFCell cellD1 = row1.createCell((short) 3);
			cellD1.setCellValue(new Date());
			cellStyle = workbook.createCellStyle();
			cellStyle.setDataFormat(HSSFDataFormat
					.getBuiltinFormat("m/d/yy h:mm"));
			cellD1.setCellStyle(cellStyle);

			workbook.write(fileOut);
			fileOut.flush();
			fileOut.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
